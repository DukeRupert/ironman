package views

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/dukerupert/ironman/woo"
)

// WooOrderDetailPage displays the full WooCommerce order details
templ WooOrderDetailPage(order woo.Order) {
	@Layout() {
		@Header()
		<main class="relative isolate pt-16">
			<!-- Background decoration -->
			<div aria-hidden="true" class="absolute inset-0 -z-10 overflow-hidden">
				<div class="absolute top-full left-16 -mt-16 transform-gpu opacity-30 blur-3xl xl:left-1/2 xl:-ml-80">
					<div
						style="clip-path: polygon(100% 38.5%, 82.6% 100%, 60.2% 37.7%, 52.4% 32.1%, 47.5% 41.8%, 45.2% 65.6%, 27.5% 23.4%, 0.1% 35.3%, 17.9% 0%, 27.7% 23.4%, 76.2% 2.5%, 74.2% 56%, 100% 38.5%)"
						class="aspect-[1154/678] w-[72.125rem] bg-gradient-to-br from-blue-200 to-purple-300"
					></div>
				</div>
				<div class="absolute inset-x-0 bottom-0 h-px bg-gray-900/5"></div>
			</div>
			@WooOrderDetailView(order)
		</main>
	}
}

// WooOrderDetailView is the main WooCommerce order detail component that can be swapped via HTMX
templ WooOrderDetailView(order woo.Order) {
	<div id="order-detail-container">
		<!-- Header Section -->
		<div class="mx-auto max-w-7xl px-4 py-10 sm:px-6 lg:px-8">
			<div class="mx-auto flex max-w-2xl items-center justify-between gap-x-8 lg:mx-0 lg:max-w-none">
				<div class="flex items-center gap-x-6">
					<!-- Company/Origin Badge -->
					<div
						class="size-16 flex-none rounded-full bg-blue-100 flex items-center justify-center ring-1 ring-gray-900/10"
					>
						<img src="/static/Woo_logo_color.png" alt="WooCommerce logo"/>
					</div>
					<h1>
						<div class="text-sm/6 text-gray-500">
							Order <span class="text-gray-700">#{ strconv.Itoa(order.ID) }</span>
						</div>
						<div class="mt-1 text-base font-semibold text-gray-900">{ getCustomerName(order) }</div>
					</h1>
				</div>
				<div class="flex items-center gap-x-4 sm:gap-x-6">
					<button
						onclick="history.back()"
						class="hidden text-sm/6 font-semibold text-gray-900 sm:block hover:text-gray-600"
					>
						‚Üê Back to Orders
					</button>
					@WooOrderStatusBadge(order.Status)
				</div>
			</div>
		</div>
		<!-- Main Content -->
		<div class="mx-auto max-w-7xl px-4 py-16 sm:px-6 lg:px-8">
			<div
				class="mx-auto grid max-w-2xl grid-cols-1 grid-rows-1 items-start gap-x-8 gap-y-8 lg:mx-0 lg:max-w-none lg:grid-cols-3"
			>
				<!-- Order Summary Sidebar -->
				<div class="lg:col-start-3 lg:row-end-1">
					<h2 class="sr-only">Summary</h2>
					<div class="rounded-lg bg-gray-50 shadow-xs ring-1 ring-gray-900/5">
						<dl class="flex flex-wrap">
							<div class="flex-auto pt-6 pl-6">
								<dt class="text-sm/6 font-semibold text-gray-900">Total Amount</dt>
								<dd class="mt-1 text-base font-semibold text-gray-900">
									{ formatWooCurrency(order.Total, order.Currency) }
								</dd>
							</div>
							<div class="flex-none self-end px-6 pt-4">
								<dt class="sr-only">Status</dt>
								@WooOrderStatusBadge(order.Status)
							</div>
							<!-- Customer Info -->
							<div class="mt-6 flex w-full flex-none gap-x-4 border-t border-gray-900/5 px-6 pt-6">
								<dt class="flex-none">
									<span class="sr-only">Customer</span>
									<svg
										viewBox="0 0 20 20"
										fill="currentColor"
										data-slot="icon"
										aria-hidden="true"
										class="h-6 w-5 text-gray-400"
									>
										<path
											d="M10 9a3 3 0 1 0 0-6 3 3 0 0 0 0 6ZM6 8a2 2 0 1 1-4 0 2 2 0 0 1 4 0ZM1.49 15.326a.78.78 0 0 1-.358-.442 3 3 0 0 1 4.308-3.516 6.484 6.484 0 0 0-1.905 3.959c-.023.222-.014.442.025.654a4.97 4.97 0 0 1-2.07-.655ZM16.44 15.98a4.97 4.97 0 0 0 2.07-.654.78.78 0 0 0 .357-.442 3 3 0 0 0-4.308-3.517 6.484 6.484 0 0 1 1.907 3.96 2.32 2.32 0 0 1-.026.654ZM18 8a2 2 0 1 1-4 0 2 2 0 0 1 4 0ZM5.304 16.19a.844.844 0 0 1-.277-.71 5 5 0 0 1 9.947 0 .843.843 0 0 1-.277.71A6.975 6.975 0 0 1 10 18a6.974 6.974 0 0 1-4.696-1.81Z"
										></path>
									</svg>
								</dt>
								<dd class="text-sm/6 font-medium text-gray-900">{ getCustomerName(order) }</dd>
							</div>
							<!-- Order Date -->
							<div class="mt-4 flex w-full flex-none gap-x-4 px-6">
								<dt class="flex-none">
									<span class="sr-only">Order date</span>
									<svg
										viewBox="0 0 20 20"
										fill="currentColor"
										data-slot="icon"
										aria-hidden="true"
										class="h-6 w-5 text-gray-400"
									>
										<path
											d="M5.25 12a.75.75 0 0 1 .75-.75h.01a.75.75 0 0 1 .75.75v.01a.75.75 0 0 1-.75.75H6a.75.75 0 0 1-.75-.75V12ZM6 13.25a.75.75 0 0 0-.75.75v.01c0 .414.336.75.75.75h.01a.75.75 0 0 0 .75-.75V14a.75.75 0 0 0-.75-.75H6ZM7.25 12a.75.75 0 0 1 .75-.75h.01a.75.75 0 0 1 .75.75v.01a.75.75 0 0 1-.75.75H8a.75.75 0 0 1-.75-.75V12ZM8 13.25a.75.75 0 0 0-.75.75v.01c0 .414.336.75.75.75h.01a.75.75 0 0 0 .75-.75V14a.75.75 0 0 0-.75-.75H8ZM9.25 10a.75.75 0 0 1 .75-.75h.01a.75.75 0 0 1 .75.75v.01a.75.75 0 0 1-.75.75H10a.75.75 0 0 1-.75-.75V10ZM10 11.25a.75.75 0 0 0-.75.75v.01c0 .414.336.75.75.75h.01a.75.75 0 0 0 .75-.75V12a.75.75 0 0 0-.75-.75H10ZM9.25 14a.75.75 0 0 1 .75-.75h.01a.75.75 0 0 1 .75.75v.01a.75.75 0 0 1-.75.75H10a.75.75 0 0 1-.75-.75V14ZM12 9.25a.75.75 0 0 0-.75.75v.01c0 .414.336.75.75.75h.01a.75.75 0 0 0 .75-.75V10a.75.75 0 0 0-.75-.75H12ZM11.25 12a.75.75 0 0 1 .75-.75h.01a.75.75 0 0 1 .75.75v.01a.75.75 0 0 1-.75.75H12a.75.75 0 0 1-.75-.75V12ZM12 13.25a.75.75 0 0 0-.75.75v.01c0 .414.336.75.75.75h.01a.75.75 0 0 0 .75-.75V14a.75.75 0 0 0-.75-.75H12ZM13.25 10a.75.75 0 0 1 .75-.75h.01a.75.75 0 0 1 .75.75v.01a.75.75 0 0 1-.75.75H14a.75.75 0 0 1-.75-.75V10ZM14 11.25a.75.75 0 0 0-.75.75v.01c0 .414.336.75.75.75h.01a.75.75 0 0 0 .75-.75V12a.75.75 0 0 0-.75-.75H14Z"
										></path>
										<path
											d="M5.75 2a.75.75 0 0 1 .75.75V4h7V2.75a.75.75 0 0 1 1.5 0V4h.25A2.75 2.75 0 0 1 18 6.75v8.5A2.75 2.75 0 0 1 15.25 18H4.75A2.75 2.75 0 0 1 2 15.25v-8.5A2.75 2.75 0 0 1 4.75 4H5V2.75A.75.75 0 0 1 5.75 2Zm-1 5.5c-.69 0-1.25.56-1.25 1.25v6.5c0 .69.56 1.25 1.25 1.25h10.5c.69 0 1.25-.56 1.25-1.25v-6.5c0-.69-.56-1.25-1.25-1.25H4.75Z"
											clip-rule="evenodd"
											fill-rule="evenodd"
										></path>
									</svg>
								</dt>
								<dd class="text-sm/6 text-gray-500">
									<time>{ formatWooOrderDate(order.DateCreated) }</time>
								</dd>
							</div>
							<!-- Payment Method -->
							if order.PaymentMethodTitle != "" {
								<div class="mt-4 flex w-full flex-none gap-x-4 px-6">
									<dt class="flex-none">
										<span class="sr-only">Payment</span>
										<svg
											viewBox="0 0 20 20"
											fill="currentColor"
											data-slot="icon"
											aria-hidden="true"
											class="h-6 w-5 text-gray-400"
										>
											<path
												d="M2.5 4A1.5 1.5 0 0 0 1 5.5V6h18v-.5A1.5 1.5 0 0 0 17.5 4h-15ZM19 8.5H1v6A1.5 1.5 0 0 0 2.5 16h15a1.5 1.5 0 0 0 1.5-1.5v-6ZM3 13.25a.75.75 0 0 1 .75-.75h1.5a.75.75 0 0 1 0 1.5h-1.5a.75.75 0 0 1-.75-.75Zm4.75-.75a.75.75 0 0 0 0 1.5h3.5a.75.75 0 0 0 0-1.5h-3.5Z"
												clip-rule="evenodd"
												fill-rule="evenodd"
											></path>
										</svg>
									</dt>
									<dd class="text-sm/6 text-gray-500">{ order.PaymentMethodTitle }</dd>
								</div>
							}
							<!-- Shipping Method -->
							if len(order.ShippingLines) > 0 && order.ShippingLines[0].MethodTitle != "" {
								<div class="mt-4 mb-6 flex w-full flex-none gap-x-4 px-6">
									<dt class="flex-none">
										<span class="sr-only">Shipping</span>
										<svg
											viewBox="0 0 20 20"
											fill="currentColor"
											data-slot="icon"
											aria-hidden="true"
											class="h-6 w-5 text-gray-400"
										>
											<path
												d="M6.5 3c-1.051 0-2.093.04-3.125.117A1.49 1.49 0 0 0 2 4.607V10.5h9V4.606c0-.681.57-1.229 1.25-1.111A41.65 41.65 0 0 1 15 3.5c.66 0 1.3.02 1.93.057A1.49 1.49 0 0 1 18 4.607v11.25c0 .69-.56 1.25-1.25 1.25H16A2 2 0 0 1 14 15v-3H6v3a2 2 0 0 1-2 2h-.75C2.56 17 2 16.44 2 15.75V4.607c0-.681.57-1.229 1.25-1.111C4.295 3.42 5.382 3.5 6.5 3.5c.66 0 1.3.02 1.93.057A1.49 1.49 0 0 1 9.5 4.607V10.5h2V4.606c0-.681.57-1.229 1.25-1.111.955-.076 1.958-.115 3-.115Z"
											></path>
										</svg>
									</dt>
									<dd class="text-sm/6 text-gray-500">{ order.ShippingLines[0].MethodTitle }</dd>
								</div>
							}
						</dl>
					</div>
				</div>
				<!-- Main Order Details -->
				<div
					class="-mx-4 px-4 py-8 shadow-xs ring-1 ring-gray-900/5 sm:mx-0 sm:rounded-lg sm:px-8 sm:pb-14 lg:col-span-2 lg:row-span-2 lg:row-end-2 xl:px-16 xl:pt-16 xl:pb-20"
				>
					<h2 class="text-base font-semibold text-gray-900">Order Details</h2>
					<!-- Order Metadata -->
					<dl class="mt-6 grid grid-cols-1 text-sm/6 sm:grid-cols-2">
						<!-- Left Column: Order Dates -->
						<div class="space-y-4 sm:pr-4">
							<div>
								<dt class="inline text-gray-500">Created on</dt>
								<dd class="text-gray-700">
									<time>{ formatWooOrderDate(order.DateCreated) }</time>
								</dd>
							</div>
							if order.DateCompleted != nil && *order.DateCompleted != "" {
								<div>
									<dt class="inline text-gray-500">Completed on</dt>
									<dd class="inline text-gray-700">
										<time>{ formatWooOrderDate(*order.DateCompleted) }</time>
									</dd>
								</div>
							}
						</div>
						<!-- Right Column: Customer and Shipping (mobile: spans full width, sm+: second column) -->
						<div
							class="mt-6 border-t border-gray-900/5 pt-6 sm:mt-0 sm:border-t-0 sm:pt-0 sm:pl-4 col-span-1 sm:col-span-1"
						>
							<!-- Customer Details -->
							<div class="mb-8">
								<dt class="font-semibold text-gray-900">Customer</dt>
								<dd class="mt-2 text-gray-500">
									<span class="font-medium text-gray-900">{ getCustomerName(order) }</span>
									if order.Billing.Email != "" {
										<br/>
										{ order.Billing.Email }
									}
									if order.Billing.Phone != "" {
										<br/>
										{ order.Billing.Phone }
									}
									if order.CustomerID > 0 {
										<br/>
										Customer ID: { strconv.Itoa(order.CustomerID) }
									}
								</dd>
							</div>
							<!-- Shipping Address -->
							if !isWooAddressEmpty(order.Shipping) {
								<div>
									<dt class="font-semibold text-gray-900">Ship to</dt>
									<dd class="mt-2 text-gray-500">
										@WooAddressDisplay(order.Shipping)
									</dd>
								</div>
							}
						</div>
					</dl>
					<!-- Order Items Table -->
					if len(order.LineItems) > 0 {
						<table class="mt-16 w-full text-left text-sm/6 whitespace-nowrap">
							<colgroup>
								<col class="w-full"/>
								<col/>
								<col/>
								<col/>
							</colgroup>
							<thead class="border-b border-gray-200 text-gray-900">
								<tr>
									<th scope="col" class="px-0 py-3 font-semibold">Product</th>
									<th scope="col" class="hidden py-3 pr-0 pl-8 text-right font-semibold sm:table-cell">Qty</th>
									<th scope="col" class="hidden py-3 pr-0 pl-8 text-right font-semibold sm:table-cell">Unit Price</th>
									<th scope="col" class="py-3 pr-0 pl-8 text-right font-semibold">Total</th>
								</tr>
							</thead>
							<tbody>
								for _, line := range order.LineItems {
									<tr class="border-b border-gray-100">
										<td class="max-w-0 px-0 py-5 align-top">
											<div class="truncate font-medium text-gray-900">{ line.Name }</div>
											if line.SKU != "" {
												<div class="truncate text-gray-500">SKU: { line.SKU }</div>
											}
											<!-- Mobile quantity and price -->
											<div class="sm:hidden mt-1 text-gray-500">
												{ strconv.Itoa(line.Quantity) } √ó { formatWooLinePrice(line, order.Currency) }
											</div>
											<!-- Meta data display -->
											for _, meta := range line.MetaData {
												if meta.Key != "" && !strings.HasPrefix(meta.Key, "_") && meta.Value != nil {
													<div class="truncate text-gray-500 text-xs">{ meta.Key }: { fmt.Sprintf("%v", meta.Value) }</div>
												}
											}
										</td>
										<td class="hidden py-5 pr-0 pl-8 text-right align-top text-gray-700 tabular-nums sm:table-cell">
											{ 
                strconv.Itoa(line.Quantity) }
										</td>
										<td class="hidden py-5 pr-0 pl-8 text-right align-top text-gray-700 tabular-nums sm:table-cell">
											{ 
                formatWooLinePrice(line, order.Currency) }
										</td>
										<td class="py-5 pr-0 pl-8 text-right align-top text-gray-700 tabular-nums">
											{ formatWooCurrency(line.Total,
                order.Currency) }
										</td>
									</tr>
								}
								<!-- Shipping Lines -->
								for _, shipping := range order.ShippingLines {
									if shipping.Total != "0" && shipping.Total != "" {
										<tr class="border-b border-gray-100">
											<td class="max-w-0 px-0 py-5 align-top">
												<div class="truncate font-medium text-gray-900">{ shipping.MethodTitle }</div>
												<div class="truncate text-gray-500">Shipping</div>
											</td>
											<td class="hidden py-5 pr-0 pl-8 text-right align-top text-gray-700 tabular-nums sm:table-cell">1</td>
											<td class="hidden py-5 pr-0 pl-8 text-right align-top text-gray-700 tabular-nums sm:table-cell">
												{ 
                formatWooCurrency(shipping.Total, order.Currency) }
											</td>
											<td class="py-5 pr-0 pl-8 text-right align-top text-gray-700 tabular-nums">
												{ 
                formatWooCurrency(shipping.Total, order.Currency) }
											</td>
										</tr>
									}
								}
								<!-- Fee Lines -->
								for _, fee := range order.FeeLines {
									if fee.Total != "0" && fee.Total != "" {
										<tr class="border-b border-gray-100">
											<td class="max-w-0 px-0 py-5 align-top">
												<div class="truncate font-medium text-gray-900">{ fee.Name }</div>
												<div class="truncate text-gray-500">Fee</div>
											</td>
											<td class="hidden py-5 pr-0 pl-8 text-right align-top text-gray-700 tabular-nums sm:table-cell">1</td>
											<td class="hidden py-5 pr-0 pl-8 text-right align-top text-gray-700 tabular-nums sm:table-cell">
												{ 
                formatWooCurrency(fee.Total, order.Currency) }
											</td>
											<td class="py-5 pr-0 pl-8 text-right align-top text-gray-700 tabular-nums">
												{ formatWooCurrency(fee.Total,
                order.Currency) }
											</td>
										</tr>
									}
								}
							</tbody>
							<tfoot>
								<!-- Subtotal -->
								<tr>
									<th scope="row" class="px-0 pt-6 pb-0 font-normal text-gray-700 sm:hidden">Subtotal</th>
									<th
										scope="row"
										colspan="3"
										class="hidden px-0 pt-6 pb-0 text-right font-normal text-gray-700 sm:table-cell"
									>Subtotal</th>
									<td class="pt-6 pr-0 pb-0 pl-8 text-right text-gray-900 tabular-nums">{ formatWooSubtotal(order) }</td>
								</tr>
								<!-- Discounts -->
								if order.DiscountTotal != "0" && order.DiscountTotal != "" {
									<tr>
										<th scope="row" class="pt-4 font-normal text-gray-700 sm:hidden">Discount</th>
										<th scope="row" colspan="3" class="hidden pt-4 text-right font-normal text-gray-700 sm:table-cell">
											Discount
										</th>
										<td class="pt-4 pr-0 pb-0 pl-8 text-right text-gray-900 tabular-nums">
											-{ 
                formatWooCurrency(order.DiscountTotal, order.Currency) }
										</td>
									</tr>
								}
								<!-- Shipping -->
								if order.ShippingTotal != "0" && order.ShippingTotal != "" {
									<tr>
										<th scope="row" class="pt-4 font-normal text-gray-700 sm:hidden">Shipping</th>
										<th scope="row" colspan="3" class="hidden pt-4 text-right font-normal text-gray-700 sm:table-cell">
											Shipping
										</th>
										<td class="pt-4 pr-0 pb-0 pl-8 text-right text-gray-900 tabular-nums">
											{ 
                formatWooCurrency(order.ShippingTotal, order.Currency) }
										</td>
									</tr>
								}
								<!-- Tax -->
								if order.TotalTax != "0" && order.TotalTax != "" {
									<tr>
										<th scope="row" class="pt-4 font-normal text-gray-700 sm:hidden">Tax</th>
										<th scope="row" colspan="3" class="hidden pt-4 text-right font-normal text-gray-700 sm:table-cell">
											Tax
										</th>
										<td class="pt-4 pr-0 pb-0 pl-8 text-right text-gray-900 tabular-nums">
											{ formatWooCurrency(order.TotalTax,
                order.Currency) }
										</td>
									</tr>
								}
								<!-- Total -->
								<tr>
									<th scope="row" class="pt-4 font-semibold text-gray-900 sm:hidden">Total</th>
									<th scope="row" colspan="3" class="hidden pt-4 text-right font-semibold text-gray-900 sm:table-cell">
										Total
									</th>
									<td class="pt-4 pr-0 pb-0 pl-8 text-right font-semibold text-gray-900 tabular-nums">
										{ 
                formatWooCurrency(order.Total, order.Currency) }
									</td>
								</tr>
							</tfoot>
						</table>
					}
				</div>
				<!-- Notes and Additional Info -->
				if order.CustomerNote != "" || hasWooOrderNotes(order) {
					<div class="lg:col-start-3">
						<h2 class="text-sm/6 font-semibold text-gray-900">Notes</h2>
						<div class="mt-6 space-y-6">
							if order.CustomerNote != "" {
								<div class="relative flex gap-x-4">
									<div class="relative flex size-6 flex-none items-center justify-center bg-white">
										<div class="size-1.5 rounded-full bg-gray-100 ring-1 ring-gray-300"></div>
									</div>
									<div class="flex-auto rounded-md p-3 ring-1 ring-gray-200 ring-inset">
										<div class="flex justify-between gap-x-4">
											<div class="py-0.5 text-xs/5 font-medium text-gray-900">Customer Note</div>
										</div>
										<p class="text-sm/6 text-gray-500">{ order.CustomerNote }</p>
									</div>
								</div>
							}
							<!-- Transaction ID -->
							if order.TransactionID != "" {
								<div class="relative flex gap-x-4">
									<div class="relative flex size-6 flex-none items-center justify-center bg-white">
										<div class="size-1.5 rounded-full bg-blue-100 ring-1 ring-blue-300"></div>
									</div>
									<div class="flex-auto rounded-md p-3 ring-1 ring-gray-200 ring-inset">
										<div class="flex justify-between gap-x-4">
											<div class="py-0.5 text-xs/5 font-medium text-gray-900">Transaction ID</div>
										</div>
										<p class="text-sm/6 text-gray-500 font-mono">{ order.TransactionID }</p>
									</div>
								</div>
							}
						</div>
					</div>
				}
			</div>
		</div>
	</div>
}

// WooAddressDisplay component for rendering WooCommerce addresses
templ WooAddressDisplay(address woo.OrderAddress) {
	if address.Company != "" {
		<span class="font-medium text-gray-900">{ address.Company }</span>
		<br/>
	}
	if address.FirstName != "" || address.LastName != "" {
		{ strings.TrimSpace(address.FirstName + " " + address.LastName) }
		<br/>
	}
	if address.Address1 != "" {
		{ address.Address1 }
		<br/>
	}
	if address.Address2 != "" {
		{ address.Address2 }
		<br/>
	}
	if address.City != "" {
		{ address.City }
	}
	if address.State != "" && address.City != "" {
		, { address.State }
	} else if address.State != "" {
		{ address.State }
	}
	if address.Postcode != "" {
		{ address.Postcode }
	}
	if address.Country != "" {
		<br/>
		{ address.Country }
	}
}

// WooOrderStatusBadge component for WooCommerce order status
templ WooOrderStatusBadge(status string) {
	<dd class={ "rounded-md px-2 py-1 text-xs font-medium ring-1 ring-inset " + getWooStatusBadgeClass(status) }>
		{ strings.Title(strings.ReplaceAll(status, "-", " ")) }
	</dd>
}

// Helper functions for WooCommerce orders
func formatWooCurrency(amount string, currency string) string {
	// Parse the string amount to float
	if amount == "" {
		amount = "0"
	}

	amountFloat := 0.0
	if parsed, err := strconv.ParseFloat(amount, 64); err == nil {
		amountFloat = parsed
	}

	switch strings.ToUpper(currency) {
	case "USD":
		return fmt.Sprintf("$%.2f", amountFloat)
	case "GBP":
		return fmt.Sprintf("¬£%.2f", amountFloat)
	case "EUR":
		return fmt.Sprintf("‚Ç¨%.2f", amountFloat)
	default:
		return fmt.Sprintf("%.2f %s", amountFloat, currency)
	}
}

func formatWooOrderDate(dateStr string) string {
	if dateStr == "" {
		return ""
	}

	// Parse the WooCommerce date format (2023-01-23T10:32:00)
	t, err := time.Parse("2006-01-02T15:04:05", dateStr)
	if err != nil {
		return dateStr // Return original if parsing fails
	}

	return t.Format("January 2, 2006")
}

func formatWooLinePrice(line woo.OrderLineItem, currency string) string {
	// Calculate unit price from subtotal and quantity
	if line.Quantity == 0 {
		return formatWooCurrency("0", currency)
	}

	subtotal := 0.0
	if parsed, err := strconv.ParseFloat(line.Subtotal, 64); err == nil {
		subtotal = parsed
	}

	unitPrice := subtotal / float64(line.Quantity)
	return formatWooCurrency(fmt.Sprintf("%.2f", unitPrice), currency)
}

func formatWooSubtotal(order woo.Order) string {
	// Calculate subtotal from line items
	subtotal := 0.0
	for _, line := range order.LineItems {
		if parsed, err := strconv.ParseFloat(line.Subtotal, 64); err == nil {
			subtotal += parsed
		}
	}
	return formatWooCurrency(fmt.Sprintf("%.2f", subtotal), order.Currency)
}

func getCustomerName(order woo.Order) string {
	name := strings.TrimSpace(order.Billing.FirstName + " " + order.Billing.LastName)
	if name == "" && order.Billing.Company != "" {
		return order.Billing.Company
	}
	if name == "" && order.Billing.Email != "" {
		return order.Billing.Email
	}
	if name == "" {
		return "Guest Customer"
	}
	return name
}

func isWooAddressEmpty(address woo.OrderAddress) bool {
	return address.FirstName == "" &&
		address.LastName == "" &&
		address.Company == "" &&
		address.Address1 == "" &&
		address.City == ""
}

func hasWooOrderNotes(order woo.Order) bool {
	return order.TransactionID != ""
}

func getWooStatusBadgeClass(status string) string {
	switch strings.ToLower(status) {
	case "pending":
		return "bg-yellow-50 text-yellow-600 ring-yellow-600/20"
	case "processing":
		return "bg-blue-50 text-blue-600 ring-blue-600/20"
	case "on-hold":
		return "bg-gray-50 text-gray-600 ring-gray-600/20"
	case "completed":
		return "bg-green-50 text-green-600 ring-green-600/20"
	case "cancelled":
		return "bg-red-50 text-red-600 ring-red-600/20"
	case "refunded":
		return "bg-purple-50 text-purple-600 ring-purple-600/20"
	case "failed":
		return "bg-red-50 text-red-600 ring-red-600/20"
	default:
		return "bg-gray-50 text-gray-600 ring-gray-600/20"
	}
}
